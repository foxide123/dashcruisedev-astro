---
type AlternateProps = {
  canonical: string;
  languages?: Record<string, string>;
};

type OpenGraphProps = {
  images: string;
};

type ImageProps = {
  href: string;
  alt: string;
  srcset?: string;
  sizes?: string;
}

type PreloadImageProps = {
  remoteImages?: ImageProps[];
  localImages?: ImageProps[];
}

export interface Props {
  title?: string;
  description?: string;
  keywords?: string[];
  creator?: string;
  publisher?: string;
  metadataBase?: URL;
  alternates?: AlternateProps;
  openGraph?: OpenGraphProps;
  imagesToPreload?: PreloadImageProps;
}

const {
  title,
  description,
  keywords,
  creator,
  metadataBase,
  alternates,
  openGraph,
  imagesToPreload
} = Astro.props;

// Creating String from Array of Keywords
let keywordsFormatted = keywords ? keywords.join(',') : '';

// CANONICAL LINK
const canonicalLink = alternates?.canonical
  ? new URL(alternates.canonical, metadataBase).toString()
  : '';

// OG Image
const ogImage = openGraph ? new URL(openGraph?.images!, metadataBase) : '/favicon.icon';
---

<title>{title}</title>
<meta name="description" content={description} />
<meta name="author" content={creator} />
<meta name="keywords" content={keywordsFormatted} />

<link rel="canonical" href={canonicalLink} />
<!-- Alternate Links like https://acme.com/en  -->
{
  alternates?.languages &&
    Object.entries(alternates.languages).map(([lang, href]) => {
      const alternateHref = new URL(href, metadataBase)
      return <link rel="alternate" hreflang={lang} href={alternateHref} />;
    })
}
<meta property="og:image" content={ogImage} />

<!-- Preload Remote Images -->
{imagesToPreload?.remoteImages?.map((image) => (
  <link rel="preload" as={image.alt} href={image.href} />
))}
