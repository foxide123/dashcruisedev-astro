---
import { SiteURL } from '@/globals';
import type { AlternateProps, BreadcrumbListItem, OpenGraphProps, PreloadImageProps } from '@/types/metadata_types';

export interface Props {
  title?: string;
  description?: string;
  keywords?: string[];
  creator?: string;
  publisher?: string;
  metadataBase?: URL;
  alternates?: AlternateProps;
  openGraph?: OpenGraphProps;
  imagesToPreload?: PreloadImageProps;
  breadcrumbListItems?: BreadcrumbListItem[];
}

const {
  title,
  description,
  keywords,
  creator,
  metadataBase,
  alternates,
  openGraph,
  imagesToPreload,
  breadcrumbListItems
} = Astro.props;

// Creating String from Array of Keywords
let keywordsFormatted = keywords ? keywords.join(',') : '';

// CANONICAL LINK
const canonicalLink = alternates?.canonical
  ? new URL(alternates.canonical, metadataBase).toString()
  : '';

// OG Image
const ogImage = openGraph?.image
  ? new URL(openGraph?.image, metadataBase)
  : `${SiteURL}/favicon.ico`;

  let breadcrumbListJsonLd = null;
  if(breadcrumbListItems){
    const breadcrumbListItemsFormatted = breadcrumbListItems.map((item) => (
      {
        "@type": "ListItem",
        "position": item.position,
        "name": item.name,
        "item": item.url
      }
    ));

  breadcrumbListJsonLd = {
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": breadcrumbListItemsFormatted
  }

  }

// Organization JSON LD
const searchJsonLd = {
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": "Dashcruise",
  "@id": "https://dashcruise.com/#organization",
  "url": SiteURL,
  "logo": `${SiteURL}/android-chrome-512x512.png`,
  "sameAs": [
    "https://linkedin.com/company/dashcruise",
    "https://www.trustpilot.com/review/dashcruise.com",
  ],
  "contactPoint": [{
    "@type": "ContactPoint",
    "telephone": "+45 52720387",
    "contactType": "customer support",
    "areaServed": "DK",
    "availableLanguage": ["English"]
  }]
};

// FAQ JSON LD
const faqJsonLd = {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": [
    {
      "@type": "Question",
      "name": "What services does Dashcruise offer?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Dashcruise offers custom web development, multilingual websites, and analytics integrations."
      }
    },
    {
      "@type": "Question",
      "name": "Do you build multilingual websites?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Yes. We specialize in multilingual websites with language-specific SEO and performance optimization."
      }
    },
    {
      "@type": "Question",
      "name": "How do I get a quote?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "You can get a quote by filling out our contact form or booking a free consultation on our website."
      }
    }
  ]
};


const serviceJsonLd = {
  "@context": "https://schema.org",
  "@type": "Service",
  "@id": "https://dashcruise.com/#organization",
  "name": "Custom Website Development",
  "provider": {
    "@type": "Organization",
    "name": "Dashcruise"
  },
  "areaServed": "Global",
  "serviceType": "Web Design & Development",
  "description": "We build fast websites tailored to your business goals."
}


---
<script type="application/ld+json" set:html={ JSON.stringify(searchJsonLd) }>
</script>
<!-- FAQ JSON-LD -->
<script type="application/ld+json" set:html={JSON.stringify(faqJsonLd)}></script>
<!-- Breadcrumb List JSON-LD -->
{
breadcrumbListJsonLd && <script type="application/ld+json" set:html={JSON.stringify(breadcrumbListJsonLd)}></script>}
<!-- Service JSON-LD -->
<script type="application/ld+json" set:html={JSON.stringify(serviceJsonLd)}></script>

<title>{title}</title>
<meta name="description" content={description} />
<meta name="author" content={creator} />
<meta name="keywords" content={keywordsFormatted} />

<link rel="canonical" href={canonicalLink} />
<!-- Alternate Links like https://acme.com/en  -->
{
  alternates?.languages &&
    Object.entries(alternates.languages).map(([lang, href]) => {
      const alternateHref = new URL(href, metadataBase);
      return <link rel="alternate" hreflang={lang} href={alternateHref} />;
    })
}

<!-- Preload Remote Images -->
{
  imagesToPreload?.remoteImages?.map((image) => (
    <link rel="preload" as="image" href={image.href} media={image.media} />
  ))
}

<!-- Facebook Meta Tags -->
{openGraph?.url && <meta property="og:url" content={openGraph.url} />}
<meta property="og:type" content="website" />
{openGraph?.title && <meta property="og:title" content={openGraph?.title} />}
{openGraph?.description && <meta property="og:description" content={openGraph.description} />}
<!-- <meta property="og:image" content={ogImage} /> -->
 <meta property="og:image" content="https://dashcruise.com/og-image.png" />

<!-- <meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:domain" content="dashcruise.com" />
<meta property="twitter:url" content=`${SiteURL}` />
<meta name="twitter:title" content="Web Agency" />
<meta
  name="twitter:description"
  content="Web Agency Offering Custom Websites"
/>
<meta name="twitter:image" content=`${SiteURL}/og-image.png` /> -->
