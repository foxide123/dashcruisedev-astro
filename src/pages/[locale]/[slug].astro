---
import { routeComponentMap } from '@/utils/routeMap';
import Layout from '@/layouts/MainLayout.astro';
import type { Props as MetadataProps } from '@/components/seo/Metadata.astro';

const { locale, slug } = Astro.params;

const safeLocale = locale as keyof typeof routeComponentMap;
const safeSlug = slug as keyof typeof routeComponentMap[typeof safeLocale];

console.log("Safe locale: ", safeLocale);
console.log("Safe slug: ", safeSlug);

const entry = routeComponentMap[safeLocale]?.[safeSlug] as any

if (!entry) {
  throw new Error(`Route not found for /${safeLocale}/${safeSlug}`);
}

const PageComponent = entry.component;
const metadata = typeof entry.metadata === 'function'
  ? entry.metadata({ locale, slug })
  : entry.metadata ?? {};

  export async function getStaticPaths() {
  const paths: { params: { locale: string; slug: string } }[] = [];

  for (const locale of Object.keys(routeComponentMap)) {
    const slugs = Object.keys(routeComponentMap[locale as keyof typeof routeComponentMap]);
    for (const slug of slugs) {
      paths.push({ params: { locale, slug } });
    }
  }
  console.log("Static paths generated:", paths);
  return paths;
}

export const prerender = true;
---

<Layout metadata={metadata}>
  <PageComponent locale={locale} />
</Layout>
